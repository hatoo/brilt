(datatype OptionI
  (SomeI i64)
  (NoneI)
)

(datatype Expr
  (Nop)
  (ConstInt i64 :cost 0)
  (ConstBool bool :cost 0)
  (Arg i64 :cost 1)
  (Add Expr Expr)
  (Sub Expr Expr)
  (Mul Expr Expr)
  (Gt Expr Expr)
  (Lt Expr Expr)
  (Eq Expr Expr)
)

(datatype ListI
  (ConsI i64 ListI)
  (NilI)
)

(datatype StateExpr
  (SArg i64)
  (Call ListI)
  (Return OptionI)
  (Print i64)
)

(datatype ListE
  (ConsE i64 Expr ListE)
  (NilE)
)

(datatype ListS
  (ConsS i64 StateExpr ListS)
  (NilS)
)

(datatype ListII
  (ConsII i64 i64 ListII)
  (NilII)
)

(datatype OptionS
  (SomeS StateExpr)
  (NoneS)
)

(datatype Node
  (Simple ListE)
  (StateFul ListS OptionS)
  (BranchIf i64 Node Node)
  (Loop i64 Node ListII)
)

(datatype List
  (Cons Node List)
  (Nil)
)

(function Linear (List) Node)

; Start Rules

; const fold

(rewrite
  (Sub (ConstInt x) (ConstInt y))
  (ConstInt (- x y))
)

(datatype Value
  (Int i64)
  (Boolean bool)
)

(function ConstValue (Node i64) Value)

(rewrite
  (Cons node (Cons (BranchIf i then else) rest))
  (Cons node (Cons then rest))
  :when ((= (ConstValue node i) (Boolean true)))
)

(rule
  ((Cons node (Cons (BranchIf i then else) rest)))
  ((ConstValue node i))
)

(rewrite
  (ConstValue (Simple (ConsE i (ConstBool b) rest)) i)
  (Boolean b)
)

(rewrite
  (ConstValue (Simple (ConsE i (ConstInt x) rest)) i)
  (Int x)
)

(rewrite
  (ConstValue (Simple (ConsE i _expr rest)) j)
  (ConstValue (Simple rest) j)
  :when ((< i j))
)

(relation Foreach (Node ListE))

(rule
  ((Foreach node (ConsE x (Arg i) rest)))
  (
    (ConstValue node i)
    (Foreach node rest)
  )
)

(rule
  ((Cons node (Cons (Simple list) rest)))
  ((Foreach node list))
)

(function rec_list (Node ListE) ListE)
(function prev_and_expr (Node Expr) Expr)
(function value-to-expr (Value) Expr)

(rewrite
  (value-to-expr (Int x))
  (ConstInt x)
)

(rewrite
  (value-to-expr (Boolean b))
  (ConstBool b)
)

(rewrite
  (rec_list node (ConsE i (Arg x) rest))
  (ConsE i (value-to-expr (ConstValue node x)) (rec_list node rest))
)

(rewrite
  (rec_list node (ConsE i expr rest))
  (ConsE i (prev_and_expr node expr) (rec_list node rest))
)

(rewrite
  (prev_and_expr prev (Arg i))
  (value-to-expr (ConstValue prev i))
)

(rewrite
  (prev_and_expr prev (Sub x y))
  (Sub (prev_and_expr prev x) (prev_and_expr prev y))
)

(rewrite
  (prev_and_expr node expr)
  expr
)

(rewrite
  (rec_list node (ConsE i expr rest))
  (ConsE i expr (rec_list node rest))
)

(rewrite
  (rec_list node (NilE))
  (NilE)
)

(rewrite
  (Cons node (Cons (Simple list) rest))
  (Cons node (Cons (Simple (rec_list node list)) rest))
)

(rewrite
  (Cons node (Cons (Linear (Cons (Simple list) tail)) rest))
  (Cons node (Cons (Linear (Cons (Simple (rec_list node list)) tail)) rest))
)

; aw

(relation no_prev_dep (ListE))

(rule
  ((no_prev_dep (ConsE i (Arg x) rest)))
  ((delete (no_prev_dep (ConsE i (Arg x) rest))))
)

(rule
  ((no_prev_dep (ConsE i _ rest)))
  ((set (no_prev_dep (ConsE i _ rest)) ()))
)

(rule ((Simple expr))
  ((no_prev_dep expr))
)

(rule ((= expr (Cons (Simple prev) (Cons (Simple succ) rest))) (no_prev_dep succ))
  ((union expr (Cons (Simple succ) rest)))
)

(rule ((= node (Cons (Simple prev) (Cons (Linear (Cons (Simple succ) rest0)) rest))) (no_prev_dep succ))
  ((union node (Cons (Linear (Cons (Simple succ) rest0)) rest)))
)


; https://github.com/sampsyo/bril/blob/main/examples/test/df/cond.bril
;@main {
;  a: int = const 47;
;  b: int = const 42;
;  cond: bool = const true;
;  br cond .left .right;
;.left:
;  b: int = const 1;
;  c: int = const 5;
;  jmp .end;
;.right:
;  a: int = const 2;
;  c: int = const 10;
;  jmp .end;
;.end:
;  d: int = sub a c;
;  print d;
;}

; cond is a constant. So egglog will optimize branches.
; (let expr
; (Linear (Cons (Simple (ConsE 0 (ConstInt 47) (ConsE 1 (ConstBool (True)) (NilE)))) (Cons (BranchIf 1 (Simple (ConsE 0 (Arg 0) (ConsE 1 (ConstInt 5) (NilE)))) (Simple (ConsE 0 (ConstInt 2) (ConsE 1 (ConstInt 10) (NilE))))) (Cons (Linear (Cons (Simple (ConsE 0 (Sub (Arg 0) (Arg 1)) (NilE))) (Cons (StateFul (NilS) (SomeS (Print 0))) (Cons (StateFul (NilS) (SomeS (Return (NoneI)))) (Nil))))) (Nil)))))
; )


; (run 100)

; (print-table ConstValue)
; (extract expr)
