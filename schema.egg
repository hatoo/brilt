(datatype Bool
  (True)
  (False)
)

(datatype OptionI
  (SomeI i64)
  (NoneI)
)

(datatype Expr
  (ConstInt i64 :cost 0)
  (ConstBool Bool :cost 0)
  (Arg i64)
  (Add Expr Expr)
  (Sub Expr Expr)
  (Gt Expr Expr)
)

(datatype IList
  (ConsI i64)
  (NilI)
)

(datatype StateExpr
  (SArg i64)
  (Call IList)
  (Return OptionI)
  (Print i64)
)

(datatype ListE
  (ConsE i64 Expr ListE)
  (NilE)
)

(datatype ListS
  (ConsS i64 StateExpr ListS)
  (NilS)
)

(datatype OptionS
  (SomeS StateExpr)
  (NoneS)
)

(datatype Node
  (Simple ListE)
  (StateFul ListS OptionS)
  (BranchIf i64 Node Node)
)

(datatype List
  (Cons Node List)
  (Nil)
)

(function Linear (List) Node)

; Start Rules

(function CBool (Node i64) Bool)

(rewrite
  (Cons node (Cons (BranchIf i then else) rest))
  (Cons node (Cons then rest))
  :when ((= (CBool node i) (True)))
)

(rule
  ((Cons node (Cons (BranchIf i then else) rest)))
  ((CBool node i))
)

(rewrite
  (CBool (Simple (ConsE i (ConstBool b) rest)) i)
  b
)

(rewrite
  (CBool (Simple (ConsE i _expr rest)) j)
  (CBool (Simple rest) j)
  :when (< i j)
)

; https://github.com/sampsyo/bril/blob/main/examples/test/df/cond.bril
;@main {
;  a: int = const 47;
;  b: int = const 42;
;  cond: bool = const true;
;  br cond .left .right;
;.left:
;  b: int = const 1;
;  c: int = const 5;
;  jmp .end;
;.right:
;  a: int = const 2;
;  c: int = const 10;
;  jmp .end;
;.end:
;  d: int = sub a c;
;  print d;
;}

; cond is a constant. So egglog will optimize branches.
(let expr
  (Linear (Cons (Simple (ConsE 0 (ConstInt 47) (ConsE 1 (ConstBool (True)) (NilE)))) (Cons (BranchIf 1 (Simple (ConsE 0 (Arg 0) (ConsE 1 (ConstInt 5) (NilE)))) (Simple (ConsE 0 (ConstInt 2) (ConsE 1 (ConstInt 10) (NilE))))) (Cons (Linear (Cons (Simple (ConsE 0 (Sub (Arg 0) (Arg 1)) (NilE))) (Cons (StateFul (NilS) (SomeS (Print 0))) (Cons (StateFul (NilS) (SomeS (Return (NoneI)))) (Nil))))) (Nil)))))
)

(run 100)

(print-size Cons)
(query-extract expr)
