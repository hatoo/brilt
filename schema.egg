(datatype OptionI
  (SomeI i64)
  (NoneI)
)

(datatype Expr
  (Nop)
  (ConstInt i64 :cost 0)
  (ConstBool bool :cost 0)
  (Arg i64 :cost 3)
  (Add Expr Expr)
  (Sub Expr Expr)
  (Mul Expr Expr)
  (Gt Expr Expr)
  (Lt Expr Expr)
  (Eq Expr Expr)
)

(datatype ListI
  (ConsI i64 ListI)
  (NilI)
)

(datatype StateExpr
  (SArg i64)
  (Call ListI)
  (Return OptionI)
  (Print i64)
)

(datatype ListE
  (ConsE i64 Expr ListE)
  (NilE)
)

(datatype ListS
  (ConsS i64 StateExpr ListS)
  (NilS)
)

(datatype ListII
  (ConsII i64 i64 ListII)
  (NilII)
)

(datatype OptionS
  (SomeS StateExpr)
  (NoneS)
)

; each first i64's are Node's id
(datatype Node
  (Simple i64 ListE)
  (StateFul i64 ListS OptionS)
  (BranchIf i64 i64 Node Node)
  (Loop i64 i64 Node ListII)
)

(datatype List
  (Cons Node List)
  (Nil)
)

(function Linear (i64 List) Node)

; Start Rules

; todo


; https://github.com/sampsyo/bril/blob/main/examples/test/df/cond.bril
;@main {
;  a: int = const 47;
;  b: int = const 42;
;  cond: bool = const true;
;  br cond .left .right;
;.left:
;  b: int = const 1;
;  c: int = const 5;
;  jmp .end;
;.right:
;  a: int = const 2;
;  c: int = const 10;
;  jmp .end;
;.end:
;  d: int = sub a c;
;  print d;
;}

; cond is a constant. So egglog will optimize branches.
; (let expr
; (Linear (Cons (Simple (ConsE 0 (ConstInt 47) (ConsE 1 (ConstBool (True)) (NilE)))) (Cons (BranchIf 1 (Simple (ConsE 0 (Arg 0) (ConsE 1 (ConstInt 5) (NilE)))) (Simple (ConsE 0 (ConstInt 2) (ConsE 1 (ConstInt 10) (NilE))))) (Cons (Linear (Cons (Simple (ConsE 0 (Sub (Arg 0) (Arg 1)) (NilE))) (Cons (StateFul (NilS) (SomeS (Print 0))) (Cons (StateFul (NilS) (SomeS (Return (NoneI)))) (Nil))))) (Nil)))))
; )


; (run 100)

; (print-table ConstValue)
; (extract expr)
